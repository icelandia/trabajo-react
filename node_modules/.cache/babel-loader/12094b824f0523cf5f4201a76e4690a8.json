{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ice\\\\Documents\\\\Workspace\\\\todo-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./style.css\";\nimport Button from './components/Button';\nimport Counters from './components/Counters';\nimport Todo from './components/Todo';\nimport inputField from './components/InputField';\n/**\n * \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function todoApp() {\n  _s();\n\n  const [todos, updateTodos] = useState([]);\n\n  const addTodo = () => {\n    const title = prompt('Nombre de Tarea: ');\n\n    if (title) {\n      const todo = {\n        id: new Date().getTime(),\n        // Con esto tengo un valor unico basado en el unixTime para manipular el ID.\n        title,\n        // Esto es equivalente a `title: title`. Estoy destructurando el atributo de este objeto todo.\n        checked: false // Este attributo lo uso como controlador para saber si esta o no lista la tarea\n\n      };\n      console.log({\n        todo\n      }); // Esto que estoy haciendo a continuacion es lo mismo que si creara un array nuevo con el valor del `todos` anterior y llamara al .push()\n      // Esta tecnica se conoce como Spread Elements: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n\n      updateTodos([...todos, todo]);\n    }\n  };\n\n  const toggleCheckbox = todo => {\n    // Al actualizar este estado por supuesto que se renderiza la lista\n    // Utilizo el .map() metodo que recorre un array y me devuelve otro array con las modificaciones que requiera. En este caso solamente modifica el objeto `todo` que fue cliqueado\n    updateTodos(todos.map(item => item.id === todo.id ? todo : item));\n  };\n\n  const onDelete = todo => {\n    // Estoy haciendo uso del metodo .filter() de la interfaz de Arrays. \n    //Este metodo recorre todos los elementos de un array y los devuelve (en un nuevo array) segun su condicion. En este caso me interesa devolver todos los elementos menos el que estoy eliminando.\n    updateTodos(todos.filter(item => todo.id !== item.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"center title\",\n      children: \"TODO App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Counters, {\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"inputField\", {\n      name: \"FieldParaPonerNombre\",\n      children: \"defo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: 'button center',\n      title: 'Add Todo',\n      callback: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-list\",\n      children: todos.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        todo: item,\n        toggleCheckbox: toggleCheckbox,\n        onDelete: onDelete\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(todoApp, \"3Q8yCWqbmJQeQ8Uk7Q7kDnb5Dt4=\");","map":{"version":3,"sources":["C:/Users/Ice/Documents/Workspace/todo-react/src/App.js"],"names":["React","useState","Button","Counters","Todo","inputField","todoApp","todos","updateTodos","addTodo","title","prompt","todo","id","Date","getTime","checked","console","log","toggleCheckbox","map","item","onDelete","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAGA;AACA;AACA;;;AACA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAEhC,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBP,QAAQ,CAAC,EAAD,CAArC;;AAEA,QAAMQ,OAAO,GAAG,MAAM;AACpB,UAAMC,KAAK,GAAGC,MAAM,CAAC,mBAAD,CAApB;;AAEA,QAAID,KAAJ,EAAU;AAER,YAAME,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADO;AACe;AAC1BL,QAAAA,KAFW;AAEJ;AACPM,QAAAA,OAAO,EAAE,KAHE,CAGK;;AAHL,OAAb;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACN,QAAAA;AAAD,OAAZ,EAPQ,CASR;AACA;;AACAJ,MAAAA,WAAW,CAAC,CAAC,GAAGD,KAAJ,EAAWK,IAAX,CAAD,CAAX;AACD;AACF,GAhBD;;AAkBA,QAAMO,cAAc,GAAIP,IAAD,IAAQ;AAE7B;AACA;AACAJ,IAAAA,WAAW,CAACD,KAAK,CAACa,GAAN,CAAUC,IAAI,IAAKA,IAAI,CAACR,EAAL,KAAYD,IAAI,CAACC,EAAlB,GAAwBD,IAAxB,GAA+BS,IAAjD,CAAD,CAAX;AAED,GAND;;AAQA,QAAMC,QAAQ,GAAIV,IAAD,IAAU;AAEzB;AACA;AACAJ,IAAAA,WAAW,CAACD,KAAK,CAACgB,MAAN,CAAaF,IAAI,IAAIT,IAAI,CAACC,EAAL,KAAYQ,IAAI,CAACR,EAAtC,CAAD,CAAX;AACD,GALD;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEN;AAAjB;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAY,MAAA,IAAI,EAAE,sBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAQE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAE,eAAnB;AAAoC,MAAA,KAAK,EAAE,UAA3C;AAAuD,MAAA,QAAQ,EAAEE;AAAjE;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,gBAEIF,KAAK,CAACa,GAAN,CAAWC,IAAD,iBACR,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAgC,QAAA,cAAc,EAAEF,cAAhD;AAAgE,QAAA,QAAQ,EAAEG;AAA1E,SAAuBD,IAAI,CAACR,EAA5B;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAzDuBP,O","sourcesContent":["import React, {useState } from \"react\";\nimport \"./style.css\";\n\nimport Button from './components/Button'\nimport Counters from './components/Counters'\nimport Todo from './components/Todo'\nimport inputField from './components/InputField'\n\n\n/**\n * \n */\nexport default function todoApp() {\n\n  const [todos, updateTodos] = useState([])\n\n  const addTodo = () => {\n    const title = prompt('Nombre de Tarea: ')\n\n    if (title){\n\n      const todo = {\n        id: new Date().getTime(), // Con esto tengo un valor unico basado en el unixTime para manipular el ID.\n        title, // Esto es equivalente a `title: title`. Estoy destructurando el atributo de este objeto todo.\n        checked: false, // Este attributo lo uso como controlador para saber si esta o no lista la tarea\n      }\n      console.log({todo})\n\n      // Esto que estoy haciendo a continuacion es lo mismo que si creara un array nuevo con el valor del `todos` anterior y llamara al .push()\n      // Esta tecnica se conoce como Spread Elements: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n      updateTodos([...todos, todo])\n    }\n  }\n\n  const toggleCheckbox = (todo)=>{\n\n    // Al actualizar este estado por supuesto que se renderiza la lista\n    // Utilizo el .map() metodo que recorre un array y me devuelve otro array con las modificaciones que requiera. En este caso solamente modifica el objeto `todo` que fue cliqueado\n    updateTodos(todos.map(item => (item.id === todo.id) ? todo : item))\n\n  }\n\n  const onDelete = (todo) => {\n\n    // Estoy haciendo uso del metodo .filter() de la interfaz de Arrays. \n    //Este metodo recorre todos los elementos de un array y los devuelve (en un nuevo array) segun su condicion. En este caso me interesa devolver todos los elementos menos el que estoy eliminando.\n    updateTodos(todos.filter(item => todo.id !== item.id))\n  }\n\n\n  return (\n    <div className=\"container center\">\n      <h1 className=\"center title\">TODO App</h1>\n      {/* Componente counters: Lo utilizo simplemente para mostrar los contadores de Tareas. */}\n      <Counters todos={todos} />\n\n      <inputField name={\"FieldParaPonerNombre\"}>defo</inputField>\n\n      {/* Componente Button: Este componente lo utilizo varias veces (ver componente 'Todo'). Y no es mas que un ejemplo para mostrar el comportamiento de un componente usado en distintas ocasiones */}\n      <Button className={'button center'} title={'Add Todo'} callback={addTodo} />\n      <ul className=\"todo-list\">        \n        {\n          todos.map((item) => (\n            <Todo todo={item} key={item.id} toggleCheckbox={toggleCheckbox} onDelete={onDelete} />\n          ))\n        }\n      </ul> \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}