{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ice\\\\Documents\\\\Workspace\\\\todo-react\\\\src\\\\components\\\\Todo\\\\index.js\";\nimport React from \"react\";\nimport Button from '../Button';\n/**\n * Otra forma de declarar componentes y exportarlos directamente \n * \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (({\n  todo,\n  toggleCheckbox,\n  onDelete\n}) => {\n  /**\n   * Aqui hay algo interesante: El `input checkbox` tiene un atributo llamado `checked`.\n   * Este atributo puede ser verdadero o falso. Entonces yo lo bindeo con el valor de todo.checked. \n   * \n   * El problema con esto es que para que el componente renderice este cambio es preciso asignarle un callback para que efectivamente se actualice este valor. \n   * Asi que le agrego un evento `onChange` al checkbox\n   */\n  const clickCheckbox = () => {\n    // Este callback que estoy invocando corresponde al cambio que realizo en el componente padre. \n    // De esta forma podemos actualizar el lista y los contadores segun sea el caso\n    toggleCheckbox({ ...todo,\n      checked: !todo.checked\n    });\n  };\n\n  const clickButton = () => {\n    // Este onDelete es el callback del componente padre para eliminar el elemento de la lista. Le paso el todo a eliminar\n    onDelete(todo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todo-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      className: \"todo-checkbox\",\n      checked: todo.checked,\n      onChange: clickCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"todo-text\",\n      children: todo.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: ' Eliminar ',\n      callback: clickButton,\n      className: 'todo-delete'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["C:/Users/Ice/Documents/Workspace/todo-react/src/components/Todo/index.js"],"names":["React","Button","todo","toggleCheckbox","onDelete","clickCheckbox","checked","clickButton","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;AACA;;;AACA,gBAAe,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,cAAR;AAAwBC,EAAAA;AAAxB,CAAD,KAAwC;AACrD;AACF;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,aAAa,GAAG,MAAI;AAExB;AACA;AACAF,IAAAA,cAAc,CAAC,EAAC,GAAGD,IAAJ;AAAUI,MAAAA,OAAO,EAAE,CAACJ,IAAI,CAACI;AAAzB,KAAD,CAAd;AACD,GALD;;AAOA,QAAMC,WAAW,GAAG,MAAK;AACvB;AACAH,IAAAA,QAAQ,CAACF,IAAD,CAAR;AACD,GAHD;;AAOA,sBACE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAC,eAAjC;AAAiD,MAAA,OAAO,EAAEA,IAAI,CAACI,OAA/D;AAAwE,MAAA,QAAQ,EAAED;AAAlF;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,gBAA6BH,IAAI,CAACM;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,YAAf;AAA6B,MAAA,QAAQ,EAAED,WAAvC;AAAoD,MAAA,SAAS,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7BD","sourcesContent":["import React from \"react\";\nimport Button from '../Button'\n\n/**\n * Otra forma de declarar componentes y exportarlos directamente \n * \n */\nexport default ({ todo, toggleCheckbox, onDelete }) => {\n  /**\n   * Aqui hay algo interesante: El `input checkbox` tiene un atributo llamado `checked`.\n   * Este atributo puede ser verdadero o falso. Entonces yo lo bindeo con el valor de todo.checked. \n   * \n   * El problema con esto es que para que el componente renderice este cambio es preciso asignarle un callback para que efectivamente se actualice este valor. \n   * Asi que le agrego un evento `onChange` al checkbox\n   */\n  const clickCheckbox = ()=>{\n\n    // Este callback que estoy invocando corresponde al cambio que realizo en el componente padre. \n    // De esta forma podemos actualizar el lista y los contadores segun sea el caso\n    toggleCheckbox({...todo, checked: !todo.checked})\n  }\n\n  const clickButton = () =>{\n    // Este onDelete es el callback del componente padre para eliminar el elemento de la lista. Le paso el todo a eliminar\n    onDelete(todo)\n  }\n\n\n\n  return (\n    <li className=\"todo-container\">\n      <input type=\"checkbox\" className=\"todo-checkbox\" checked={todo.checked} onChange={clickCheckbox} />\n      <span className=\"todo-text\">{todo.title}</span>\n      <Button title={' Eliminar '} callback={clickButton} className={'todo-delete'} />\n    </li>\n  )\n};\n\n"]},"metadata":{},"sourceType":"module"}